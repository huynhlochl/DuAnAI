# -*- coding: utf-8 -*-
"""DuAnSVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sWSKrpnP8hoGHa5DZxMIkP9giY1Xusn1
"""

# 	khai báo các thư viện cần thiết cho mô hình

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

# tải bộ dữ liệu bệnh tiểu đường
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# in ra 5 hàng đầu của tập dữ liệu
diabetes_dataset.head()

# số hàng và cột trong tập dữ liệu này
diabetes_dataset.shape

# nhận các biện pháp thống kê của dữ liệu
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()
# giá trị trung binh glucose của người ko bị tiểu đường: 109.980000
# giá trị trung binh glucose của người bị tiểu đường: 141.257463

# tách dữ liệu và nhãn
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

#đào tạo bộ phân loại máy vector hỗ trợ
classifier.fit(X_train, Y_train)

# điểm chính xác trên dữ liệu huấn luyện
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# điểm chính xác trên dữ liệu thử nghiệm
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

# Tính toán và hiển thị ma trận nhầm lẫn, độ chính xác, precision, recall và F1-score
from sklearn.metrics import confusion_matrix, classification_report

# Tính toán ma trận nhầm lẫn
confusion_mat = confusion_matrix(Y_test, X_test_prediction)

# Hiển thị ma trận nhầm lẫn
print("Confusion Matrix:")
print(confusion_mat)

# Tính toán độ chính xác, precision, recall và F1-score
classification_rep = classification_report(Y_test, X_test_prediction)

# Hiển thị độ chính xác, precision, recall và F1-score
print("Classification Report:")
print(classification_rep)

# Tính toán tỷ lệ chính xác của mô hình
accuracy = test_data_accuracy * 100
error = (1 - test_data_accuracy) * 100

# hiển thị tỷ lệ chính xác của mô hình
print(f'Accuracy: {accuracy:.2f}%')
print(f'Error: {error:.2f}%')

# Hiển thị tỷ lệ người bị bệnh tiểu đường và người không bị
diabetes_count = diabetes_dataset['Outcome'].value_counts()
diabetes_labels = ['Not Diabetic', 'Diabetic']
diabetes_ratio = diabetes_count / diabetes_count.sum()

# Vẽ biểu đồ tròn
plt.pie(diabetes_ratio, labels=diabetes_labels, autopct='%1.1f%%')
plt.title('Diabetes Ratio')
plt.show()

# Hiển thị 5 người bị bệnh tiểu đường
diabetic_patients = diabetes_dataset[diabetes_dataset['Outcome'] == 1].head(5)
print("5 người bị bệnh tiểu đường:")
print(diabetic_patients)

# Hiển thị 5 người không bị bệnh tiểu đường
non_diabetic_patients = diabetes_dataset[diabetes_dataset['Outcome'] == 0].head(5)
print("5 người không bị bệnh tiểu đường:")
print(non_diabetic_patients)

input_data = (5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')